"""Додано meet_link у Subject

Revision ID: fe8102419bc3
Revises: 
Create Date: 2025-02-02 17:04:25.579770

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fe8102419bc3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_uploads')
    op.drop_index('ix_messages_id', table_name='messages')
    op.drop_table('messages')
    op.drop_index('ix_chat_participants_id', table_name='chat_participants')
    op.drop_table('chat_participants')
    op.drop_index('ix_chats_id', table_name='chats')
    op.drop_table('chats')
    op.add_column('subjects', sa.Column('meet_link', sa.String(), nullable=True))
    op.create_unique_constraint(None, 'subjects', ['meet_link'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'subjects', type_='unique')
    op.drop_column('subjects', 'meet_link')
    op.create_table('chats',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('chats_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('is_group', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('subject_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='chats_subject_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chats_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_chats_id', 'chats', ['id'], unique=False)
    op.create_table('chat_participants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('chat_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], name='chat_participants_chat_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='chat_participants_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chat_participants_pkey')
    )
    op.create_index('ix_chat_participants_id', 'chat_participants', ['id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('chat_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], name='messages_chat_id_fkey'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='messages_sender_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='messages_pkey')
    )
    op.create_index('ix_messages_id', 'messages', ['id'], unique=False)
    op.create_table('task_uploads',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('files', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'uploaded'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='task_uploads_student_id_fkey'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_uploads_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_uploads_pkey')
    )
    # ### end Alembic commands ###
